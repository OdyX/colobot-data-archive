\b;Instrukcja \c;synchronized\n; (dla specjalistów)
Metoda \l;klasy\u cbot\class; mo¿e byæ zadeklarowana jako \c;synchronized\n;. Dziêki temu mo¿na zapewniæ, ¿e metoda bêdzie uruchamiana nie wiêcej ni¿ przez jednego robota w tym samym czasie.

Nastêpuj¹cy przyk³ad pomo¿e zilustrowaæ problem:
\c;
\s;class blokowanie
\s;{
\s;	static int nb = 33;
\s;	synchronized int inc( )
\s;	{
\s;		int val = nb;
\s;		wait ( 2 );  // czekaj 2 sekundy
\s;		nb = nb + 1;
\s;		return val;
\s;	}
\s;}
\n;
Co siê dzieje, gdy dwa roboty wykonaj¹ metodê \c;inc\n; w tym samym czasie¦?
Oba wykonaj¹ polecenie \c;val=nb\n; i poczekaj¹ 2 sekundy, a wiêc oba otrzymaj¹ \c;val=33\n;. Gdy u¿yjemy instrukcji \c;synchronized\n; pierwszy robot rozpocznie wykonywanie z \c;val=33\n; poczeka 2 sekundy i wyjdzie z metody. Dopiero po zakoñczeniu wykonywania metody \c;inc\n; przez pierwszego robota, drugi robot bêdzie mia³ mo¿liwoœæ wykonania metody \c;inc\n;, wobec czego otrzyma on zawsze \c;val=34\n;.

Mo¿na mieæ wiêcej ni¿ jedn¹ zsynchronizowan¹ metodê w \l;klasie\u cbot\class; w celu zapobie¿enia równoczesnemu wykonywaniu wiêcej ni¿ jednej metody. Innymi s³owy: tak d³ugo, jak d³ugo robot jest wewn¹trz zsynchronizowanej metody, ¿aden inny robot nie mo¿e wykonywaæ ¿adnej zsynchronizowanej metody tej samej klasy.

\t;Zobacz równie¿
\c;\l;klasa\u cbot\class;\n;, \c;\l;static\u cbot\static;\n;
\l;Programowanie\u cbot;, \l;typy\u cbot\type; i \l;kategorie\u cbot\category;.
