\b;Tablice
Tablica jest zestawem obiektów tego samego typu lub klasy. W jêzyku CBOT mo¿na u¿ywaæ N wymiarowych tablic. Ka¿dy wymiar jest ograniczony do 9999 elementów. Aby zadeklarowaæ tablicê, nale¿y u¿yæ nawiasów kwadratowych \c;[]\n; po nazwie zmiennej lub nazwie typu.
\c;
\s;int    [ ] a;   // tablica typu int
\s;int    a [12];  // tablica typu int ograniczona do 12 elementów
\s;string s[3];    // tablica 3 elementów typu string
\s;float  xy[][];  // 2 wymiarowa tablica typu float
\n;
W rzeczywistoci, gdy interpreter jêzyka CBOT napotka deklaracjê tablicy, tworzy jedynie \l;wska¿nik\u cbot\pointer; \c;\l;null\u cbot\null;\n;:
\c;
\s;int a[5];  // jest teraz wskanikiem null
\n;
Z chwil¹ wstawienia wartoci do tablicy, tworzone s¹ elementy i inicjalizowany jest wskanik:
\c;
\s;a[2] = 213;  // tablica a wskazuje na
\s;             // 3 elementy: [0], [1] i [2]
\n;
Po tej operacji, zmienna \c;a\n; zawiera wskanik do elementów tablicy. Elementy \c;[0]\n; i \c;[1]\n; s¹ tworzone, ale nie inicjalizowane, gdy¿ tablica nie mo¿e zawieraæ pustych elementów. Instrukcja \c;\l;sizeof\u cbot\sizeof;\n; umo¿liwia sprawdzenie liczby elementów tablicy.

Gdy okrelony jest rozmiar maksymalny deklarowanej tablicy, program zatrzyma siê w przypadku próby dostêpu poza tablicê. B³¹d ten nie jest sygnalizowany podczas kompilacji, nawet jeli jest oczywisty:
\c;
\s;{
\s;	int a[5];
\s;	a[7] = 123;  // nie ma b³êdu podczas kompilacji
\s;	             // ale pojawia siê podczas dzia³ania programu
\s;}
\n;
Jeli tablica przekazywana jest jako parametr \l;funkcji\u cbot\function;, funkcja otrzymuje jedynie \l;wskanik\u cbot\pointer; do tablicy. Oznacza to, ¿e w przypadku modyfikacji elementu tablicy wewn¹trz funkcji, zostanie w rzeczywistoci zmodyfikowany element tablicy przekazanej funkcji jako parametr.

\t;Zobacz równie¿
\l;Programowanie\u cbot;, \l;typy\u cbot\type; i \l;kategorie\u cbot\category;.
