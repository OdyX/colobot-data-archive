\b;Instrukcja \c;this\n;
Czasami metoda \l;klasy\u cbot\class; potrzebuje wskaŸnika do instancji, w której dzia³a. Na przyk³ad instancja mo¿e chcieæ przekazaæ wskaŸnik do samej siebie jako parametr dla innej  funkcji. Odwo³anie wprost poprzez \c;this\n; jest dostêpne równie¿ dla metod; \c;this\n; jest odwo³aniem do bie¿¹cej instancji.
\c;
\s;public class MojaKlasa
\s;{
\s;	int    m_int;
\s;	string m_str;
\s;	void MojaFunkcja()
\s;	{
\s;		InnaFunkcja(this);
\s;		m_int = 2;
\s;	}
\s;}
\s;
\s;void InnaFunkcja(MojaKlasa obj)
\s;{
\s;	message(obj.m_str);
\s;}
\s;
\s;extern void object::Test()
\s;{
\s;	MojaKlasa item();
\s;	item.m_str = "Czeœæ";
\s;	item.MojaFunkcja();  // wyœwietla "Czeœæ"
\s;}
\n;
Mo¿na równie¿ umieœciæ \c;this\n; przed nazw¹ pola w metodzie, ale nie jest to konieczne. W powy¿szym przyk³adzie metody \c;MojaFunkcja()\n; nastêpuj¹ce dwie linie maj¹ identyczne znaczenie:
\c;
\s;	m_int = 2;
\s;	this.m_int = 2;  // identyczne
\n;
Równie¿ w metodzie klasy \c;\l;object\u cbot\object;\n; mo¿na u¿yæ \c;this.\n; przed nazw¹ pola.
\c;
\s;extern void object::Display()
\s;{
\s;	message(orientation);
\s;	message(this.orientation); // to samo ale
\s;	                           // bardziej jednoznacznie
\s;}
\n;
Jednak¿e jeœli nazwa pola jest ukryta poprzez deklaracjê parametru lub zmiennej, nale¿y u¿yæ \c;this\n;. W nastêpuj¹cym przyk³adzie nazwa parametru \c;value\n; jest taka sama jak nazwa pola \c;value\n; w \l;klasie\u cbot\class; \c;MojaKlasa\n;, wobec tego w celu rozró¿nienia pola od parametru, konieczne jest napisanie \c;this.value\n;.
\c;
\s;public class MojaKlasa
\s;{
\s;	int  value;
\s;	void Put( int value )
\s;	{
\s;		this.value = value;
\s;	}
\s;}
\n;
\t;Zobacz równie¿
\c;\l;class\u cbot\class;\n;
\l;Programowanie\u cbot;, \l;typy\u cbot\type; i \l;kategorie\u cbot\category;.
