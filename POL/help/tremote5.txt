\b;Æwiczenie
Pokieruj zdalnie robotem podleg³ym bez u¿ywania \l;stacji przekanikowej informacji\u object\exchange;. Robot powinien przejæ przez 6 niebieskich plusów. 

Dwoma g³ównymi postaciami tego æwiczenia s¹¦:
1) \l;Transporter na ko³ach\u object\botgr; bez ogniwa elektrycznego, wobec czego unieruchomiony. Jest to robot nadrzêdny, który powinien zostaæ zaprogramowany aby móg³ przesy³aæ rozkazy do podleg³ego mu robota.
2) Podleg³y \l;robot treningowy\u object\bottr;, który jest ju¿ zaprogramowany i tylko czeka na rozkazy od robota nadrzêdnego.

Rozkazy powinny byæ przechowywane, tak aby robot nadrzêdny móg³ wys³aæ wiele rozkazów bez czekania na przetworzenie ka¿dego z nich. Do tego celu nale¿y u¿yæ \l;tablicy\u cbot\array;.

\b;Robot podleg³y
Najpierw musimy zrozumieæ jak dzia³a program robota podleg³ego. \l;Klasa\u cbot\class; \c;order\n; zawiera dwa elementy: \c;m_type\n; jest rozkazem do wykonania (move lub turn), a \c;m_param\n; jest odleg³oci¹ do pokonania lub k¹tem obrotu¦:

\c;\s;\l;public\u cbot\public; \l;class\u cbot\class; order
\s;{
\s;	\l;int\u cbot\int;    m_type;
\s;	\l;float\u cbot\float;  m_param;
\s;}
\n;
Druga \l;klasa\u cbot\class; \c;exchange\n; zawiera mechanizm przekazywania rozkazów. Deklarujemy jako \c;\l;static\u cbot\static;\n; element klasy \c;m_fifo\n;, który bêdzie zawiera³ listê rozkazów do wykonania. S³owo \c;static\n; zapewnia, ¿e element \c;m_fifo\n; jest wspó³u¿ytkowany przez wszystkie instancje \l;klasy\u cbot\class; exchange.

\c;\s;{
\s;	\l;static\u cbot\static; \l;private\u cbot\private; order m_fifo[] = null;
\n;
Metoda \c;put\n; bêdzie u¿ywana przez robota nadrzêdnego do przesy³ania rozkazów. Rozkaz bêdzie dodawany na koñcu tablicy \c;m_fifo\n;:

\c;\s;	\l;synchronized\u cbot\synchro; void put(order a)
\s;	{
\s;		m_fifo[sizeof(m_fifo)] = a;
\s;	}
\n;
Kolejna metoda \c;get\n; bêdzie u¿ywana przez robota podleg³ego do otrzymywania rozkazów. Metoda ta jako wynik zwraca rozkaz do wykonania. Jeli lista jest pusta, zostanie zwrócona wartoæ \c;null\n; i robot powinien czekaæ na wiêcej rozkazów. W przeciwnym przypadku powinien zostaæ zwrócony pierwszy rozkaz na licie, a pozosta³e musz¹ zostaæ "przesuniête". Poniewa¿ tablica nie mo¿e byæ "skrócona", u¿ywamy pomocniczej tablicy \c;copy\n;¦:

\c;\s;	\l;synchronized\u cbot\synchro; order get()
\s;	{
\s;		if ( sizeof(m_fifo) == 0 )  return null;
\s;
\s;		order a = m_fifo[0];
\s;		order copy[] = null;
\s;		for ( int i=1 ; i<sizeof(m_fifo) ; i++ )
\s;		{
\s;			copy[i-1] = m_fifo[i];
\s;		}
\s;		m_fifo = copy;
\s;		return a;
\s;	}
\n;
G³ówny program robota podleg³ego zawiera instancjê klasy \c;exchange\n; nazwan¹ \c;list\n;. Po s³owie \c;list\n; nale¿y napisaæ nawiasy (), w celu utworzenia instancji klasy \c;exchange\n;.

\c;\s;\l;extern\u cbot\extern; void object::Slave5( )
\s;{
\s;	exchange list();
\s;	order    todo;
\n;
Zewnêtrzna pêtla \c;while\n; dzia³a w nieskoñczonoæ. Wewnêtrzna pêtla \c;while\n; czeka na rozkaz u¿ywaj¹c metody \c;get\n; z klasy \c;exchange\n;. Pêtla zatrzymuje siê gdy metoda \c;get\n; zwróci wartoæ ró¿n¹ od \c;null\n;.

\c;\s;	\l;while\u cbot\while; ( true )
\s;	{
\s;		\l;while\u cbot\while; ( true )
\s;		{
\s;			todo = list.get();
\s;			if ( todo != null )  break;
\s;			wait(1);
\s;		}
\n;
Po otrzymaniu rozkazu w zmiennej \c;todo\n; wystarczy tylko go wykonaæ:

\c;\s;		if ( todo.m_type == 1 )
\s;		{
\s;			move(todo.m_param);
\s;		}
\s;		else if ( todo.m_type == 2 )
\s;		{
\s;			turn(todo.m_param);
\s;		}
\s;		else
\s;		{
\s;			message("Nieznany rozkaz");
\s;		}
\s;	}
\s;}
\n;
\b;Robot nadrzêdny
W robocie nadrzêdnym nale¿y napisaæ funkcjê nazwan¹ \c;SendOrder\n;, która wyle rozkaz do robota podleg³ego:

\c;\s;void object::SendOrder(float order, float param)
\s;{
\s;	exchange list();
\s;	order    todo();
\s;	
\s;	todo.m_type = order;
\s;	todo.m_param = param;
\s;	list.put(todo);
\s;}
\n;
G³ówny program robota nadrzêdnego jest bardzo prosty:

\c;\s;extern void object::Remote5( )
\s;{
\s;	SendOrder(1, 20);  // move(20);
\s;	SendOrder(2, 90);  // turn(90);
\s;	SendOrder(1, 20);  // move(20);
\s;	SendOrder(2, 90);  // turn(90);
\s;	SendOrder(1, 10);  // move(10);
\s;	SendOrder(2, 90);  // turn(90);
\s;	SendOrder(1, 10);  // move(10);
\s;	SendOrder(2,-90);  // turn(-90);
\s;	SendOrder(1, 10);  // move(10);
\s;}
\n;
Klawisz \key;\key help;\norm; umo¿liwia wywietlenie tych informacji w dowolnej chwili.

\t;Zobacz równie¿
\l;Sterowanie\u command; i \l;programowanie\u cbot;.
