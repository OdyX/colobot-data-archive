\b;Æwiczenie
Zaprogramuj robota, aby znajdowa³ wyjcie z labiryntu bez uderzania o ciany. Zak³adamy, ¿e konfiguracja labiryntu nie jest znana, jednak nie ma w nim rozwidleñ ani lepych uliczek. Labirynt sk³ada siê z kwadratów o boku 5 m ka¿dy.

\b;Instrukcja \c;radar\n;
Instrukcja \c;\l;radar\u cbot\radar;(Barrier, 0, 45, 0, 5);\n; znajdzie \l;barierê\u object\barrier; przed robotem, która jest bli¿ej ni¿ 5 metrów. Przyjrzyjmy siê bli¿ej piêciu u¿ytym parametrom:

\s;\c;Barrier\n;
\l;Kategoria\u cbot\category; obiektu, którego ma szukaæ radar, np. bariera.

\s;\c;0\n;
Kierunek, w którym "patrzy" radar. \c;0\n; oznacza, ¿e radar powinien szukaæ obiektu wprost przed sob¹.

\s;\c;45\n;
K¹t widzenia, w stopniach. Z k¹tem widzenia równym 45 stopni, wykryte zostan¹ bariery znajduj¹ce siê pomiêdzy 22,5 stopnia w lewo a 22,5 stopnia w prawo.

\s;\c;0\n;
Minimalna odleg³oæ wykrywania. \c;0\n; oznacza, ¿e zostan¹ wykryte nawet obiekty bêd¹ce bardzo blisko robota.

\s;\c;5\n;
Maksymalna odleg³oæ wykrywania. ¯adna bariera dalej ni¿ \c;5\n; metrów nie zostanie wykryta.

Wemy inny przyk³ad, \c;\l;radar\u cbot\radar;(Barrier, 90, 45, 0, 5);\n; skieruje radar 90 stopni w lewo, w celu sprawdzenia, czy droga po lewej stronie jest wolna.

\image tlaby1 10 10;
\b;Ogólny algorytm
Program powinien zajmowaæ siê tylko pojedynczymi kwadratami labiryntu. Nale¿y uruchomiæ go wielokrotnie, aby robot doszed³ do platformy koñcowej.
o  Jeli nie ma niczego przed robotem, id naprzód.
o  Jeli nie ma niczego po lewej stronie, wykonaj æwieræ obrotu w lewo i id naprzód.
o  Jeli nie ma niczego po prawej stronie, wykonaj æwieræ obrotu w prawo i id naprzód.

1) Na pocz¹tek zadeklaruj trzy \l;zmienne\u cbot\var; typu \c;\l;object\u cbot\object;\n;, nazwane \c;front\n;, \c;left\n; i \c;right\n;. Zmienne tego typu mog¹ zawieraæ opisy dowolnych obiektów, w tym przypadku bariery znalezionej przez radar.
\s;\c;	object   front, left, right;\n;

2) Szukaj bariery we wszystkich trzech kierunkach, a wyniki instrukcji \c;radar\n; umieæ w trzech zmiennych zdefiniowanych w punkcie 1). Jeli radar niczego nie wykryje, zmienna bêdzie zawiera³a wartoæ \c;\l;null\u cbot\null;\n;.
\s;\c;	front = radar(Barrier,   0, 45, 0, 5);
\s;	left  = radar(Barrier,  90, 45, 0, 5);
\s;	right = radar(Barrier, -90, 45, 0, 5);
\n;
3) U¿ywaj¹c instrukcji \c;\l;if\u cbot\if;\n;, sprawd droga przed robotem jest wolna. Jeli warunek bêdzie prawdziwy, zostan¹ wykonane instrukcje w klamrach \c;{ }\n;, w przeciwnym wypadku, dzia³anie programu zostanie wznowione po klamrze zamykaj¹cej \c;}\n;.
Instrukcja \c;return\n; opuszcza program: zadanie zosta³o wykonane.
\s;\c;if ( front == null )
\s;{
\s;	move(5);
\s;	return;
\s;}
\n;
4) Sprawd, czy mo¿liwy jest obrót w lewo; jeli tak, skrêæ w lewo instrukcj¹ \c;\l;turn\u cbot\turn;\n; i id 5 metrów do przodu.
\s;\c;if ( left == null )
\s;{
\s;	turn(90);
\s;	move(5);
\s;	return;
\s;}
\n;
5) Sprawd, czy mo¿liwy jest obrót w prawo.
    ...

\b;Uwaga
Po instrukcji \c;if ( )\n; nigdy nie powinien wyst¹piæ \l;rednik\u cbot\term;.

\t;Zobacz równie¿
\l;Programowanie\u cbot;, \l;typy\u cbot\type; i \l;kategorie\u cbot\category;.
