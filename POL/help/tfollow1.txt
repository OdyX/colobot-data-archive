\b;Æwiczenie
Pod¹¿aj za \l;robotem celem\u object\bottr; nios¹cym ³adunek wybuchowy. B¹dŸ ostro¿ny, gdy¿ zderzenie z nim grozi wybuchem. Podczas ka¿dego zatrzymania robota celu nale¿y byæ odpowiednio blisko niego (mniej ni¿ 10 metrów). Gdy uda siê byæ w pobli¿u robota 10 razy z rzêdu, æwiczenie zakoñczy siê wraz z jego dotarciem na platformê koñcow¹. Przy ka¿dym zatrzymaniu robot cel sprawdza, czy œledz¹cy go robot jest odpowiednio blisko. Jeœli nie, liczenie zaczyna siê od pocz¹tku.

\b;Ogólny algorytm
Powtarzaj w nieskoñczonoœæ:
o  ZnajdŸ robot cel.
o  Oblicz odleg³oœæ do robota.
o  Jeœli odleg³oœæ jest mniejsza ni¿ 5 m, cofnij siê.
o  W przeciwnym przypadku oblicz kierunek do robota celu i idŸ w jego stronê.

Podobnie jak poprzednio u¿yj nieskoñczonej pêtli \c;\l;while\u cbot\while; (true)\n;:
\s;\c;while (true)
\s;{
\s;	\n;instrukcje, które maj¹ byæ powtarzane ...\c;
\s;}
\n;
ZnajdŸ robot cel instrukcj¹ \c;\l;radar\u cbot\radar;\n;:
\s;\c;	target = radar(TargetBot);
\n;
Nie musisz sprawdzaæ, czy robot znalaz³ cel: na pewno tam jest.

U¿yj instrukcji \c;\l;distance\u cbot\dist;( , )\n; do obliczenie odleg³oœci miêdzy dwoma punktami. Pierwszym jest pozycja Twojego robota, podana przez \c;position\n;. Drugim jest pozycja robota celu, podana przez \c;target.position\n;.
\s;\c;len = distance(position, target.position);
\n;
Jeœli odleg³oœæ od robota celu jest mniejsza ni¿ 5 metrów, oddal siê od niego z prêdkoœci¹ odwrotnie proporcjonaln¹ do odleg³oœci: im bli¿ej jest robot, tym szybciej nale¿y siê cofaæ.
	Odleg³oœæ = 5.0 metrów -> prêdkoœæ =  0.0
	Odleg³oœæ = 2.5 metra  -> prêdkoœæ = -0.5
	Odleg³oœæ = 0.0 metrów -> prêdkoœæ = -1.0
Aby to uzyskaæ, mo¿esz u¿yæ \l;wyra¿enia\u cbot\expr; \c;distance/5-1\n;, wspólnie z instrukcj¹ \c;\l;if\u cbot\if;\n; sprawdzaj¹c¹, czy cel jest bli¿ej ni¿ 5 m:
\s;\c;if ( len < 5 )  // za blisko?
\s;{
\s;	motor(len/5-1, len/5-1);  // cofnij
\s;}
\n;
Jeœli odleg³oœæ do celu jest wiêksza ni¿ 5m, poruszaj siê w jego kierunku. Najpierw oblicz k¹t niezbêdny do obrócenia siê w jego kierunku u¿ywaj¹c instrukcji \c;\l;direction\u cbot\direct;\n;. Nastêpnie dostosuj prêdkoœci prawego i lewego silnika, aby Twój robot pod¹¿a³ za celem:
\s;\c;else
\s;{
\s;	dir = direction(target.position);
\s;	if ( dir >= 0 )  // cel po lewej stronie?
\s;	{
\s;		motor(1-dir/90, 1);
\s;	}
\s;	else  // cel po prawej stronie?
\s;	{
\s;		\n;do Ciebie nale¿y uzupe³nienie tego\c;
\s;	}
\s;}
\n;
Gdy cel jest po lewej stronie, zmienna \c;dir\n; ma wartoœæ dodatni¹, pomiêdzy 0 i 180. \l;Wyra¿enie\u cbot\expr; \c;1-dir/90\n; zwraca prêdkoœæ w zakresie pomiêdzy 1 i -1 w zale¿noœci od kierunku:
	kierunek =   0 -> prêdkoœæ =  1.0
	kierunek =  45 -> prêdkoœæ =  0.5
	kierunek =  90 -> prêdkoœæ =  0.0
	kierunek = 135 -> prêdkoœæ = -0.5
	kierunek = 180 -> prêdkoœæ = -1.0

\image radar2 14 10;
Gdy cel jest po prawej stronie, zmienna \c;dir\n; ma wartoœæ ujemn¹, pomiêdzy 0 i -180.

Jedynym zadaniem jakie jeszcze Ci zosta³o jest zadeklarowanie \l;zmiennych\u cbot\var; u¿ywanych w programie. \c;target\n; jest typu \c;object\n;, podczas gdy \c;dir\n; i \c;len\n; s¹ typu \c;float\n;.

\t;Zobacz równie¿
\l;Programowanie\u cbot;, \l;typy\u cbot\type; i \l;kategorie\u cbot\category;.
